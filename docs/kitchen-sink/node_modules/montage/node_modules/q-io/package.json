{
  "name": "q-io",
  "version": "1.3.2",
  "description": "IO using Q promises",
  "homepage": "http://github.com/kriskowal/q-io/",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal/"
  },
  "bugs": {
    "mail": "kris@cixar.com",
    "url": "http://github.com/kriskowal/q-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/kriskowal/q-io/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kriskowal/q-io.git"
  },
  "dependencies": {
    "q": "0.8.x && >=0.8.11",
    "qs": "0.1.x",
    "url2": "0.0.x",
    "mime": "1.2.x",
    "mimeparse": "0.1.x",
    "collections": "0.1.x"
  },
  "devDependencies": {
    "test": "*"
  },
  "scripts": {
    "test": "node test/all.js"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "readme": "\n[![Build Status](https://secure.travis-ci.org/kriskowal/q-io.png)](http://travis-ci.org/kriskowal/q-io)\n\n# Q-IO\n\nInterfaces for IO that make use of promises.\n\nQ-IO now subsumes all of [Q-HTTP][] and [Q-FS][].\n\n[Q-HTTP]: https://github.com/kriskowal/q-http\n[Q-FS]: https://github.com/kriskowal/q-fs\n\n## Filesystem\n\nFile system API for Q promises with method signatures patterned after\n[CommonJS/Fileystem/A](http://wiki.commonjs.org/wiki/Filesystem/A) but\nreturning promises and promise streams.\n\n### open(path, options)\n\nOptions is an optional object.\n\n-   ``flags``: ``r``, ``w``, ``a``, ``b``, default of `r`, not binary\n-   ``charset``: default of ``utf-8``\n-   ``bufferSize``: in bytes\n-   ``mode``: UNIX permissions\n-   ``begin`` first byte to read (defaults to zero)\n-   ``end`` one past the last byte to read.  ``end - begin == length``\n\nOpen returns a promise for either a Reader or a Writer depending on the\ngiven flags.\n\n### read(path, options)\n\n### write(path, content, options)\n\n### append(path, content, options)\n\n### copy(source, target)\n\n### copyTree(source, target)\n\n### list(path)\n\n### listTree(path, guard(path, stat))\n\n### listDirectoryTree(path)\n\n### makeDirectory(path)\n\n### makeTree(path)\n\n### remove(path)\n\n### removeTree(path)\n\n### link(source, taget)\n\n### symbolicCopy(source, target)\n\n### symbolicLink(target, relative, type)\n\n### chown(path, uid, gid)\n\n### chmod(path, mode)\n\n### stat(path)\n\n### statLink(path)\n\n### statFd(fd)\n\n### exists(path)\n\n### isFile(path)\n\n### isDirectory(path)\n\n### lastModified(path)\n\n### split(path)\n\n### join(paths)\n\n### join(...paths)\n\n### resolve(...paths)\n\n### normal(...paths)\n\n### absolute(path)\n\n### canonical(path)\n\n### readLink(path)\n\n### contains(parent, child)\n\n### relative(source, target)\n\n### relativeFromFile(source, target)\n\n### relativeFromDirectory(source, target)\n\n### isAbsolute(path)\n\n### isRelative(path)\n\n### isRoot(path)\n\n### root(path)\n\n### directory(path)\n\n### base(path, extension)\n\n### extension(path)\n\n### reroot(path)\n\n### toObject(path)\n\n### glob(pattern)\n\nNot yet implemented\n\n### match(pattern, path)\n\nNot yet implemented\n\n## HTTP\n\nThe HTTP module resembles [CommonJS/JSGI][].\n\n[CommonJS/JSGI]: http://wiki.commonjs.org/wiki/JSGI\n\n### Server(app)\n\nThe `http` module exports a `Server` constructor.\n\n-   accepts an application, returns a server.\n-   calls the application function when requests are received.\n    -   if the application returns a response object, sends that\n        response.\n-   ``listen(port)``\n    -   accepts a port number.\n    -   returns a promise for undefined when the server has begun\n        listening.\n-   ``stop()``\n    -   returns a promise for undefined when the server has stopped.\n\n### request(request object or url)\n\nThe `http` module exports a `request` function that returns a promise\nfor a response.\n\n-   accepts a request or a URL string.\n-   returns a promise for a response.\n\n### read(request object or url)\n\nThe `http` module exports a `read` function, analogous to\n`Fs.read(path)`, but returning a promise for the contento of an OK HTTP\nresponse.\n\n-   accepts a request or a URL string.\n-   returns a promise for the response body as a string provided\n    that the request is successful with a 200 status.\n    -   rejects the promise with the response as the reason for\n        failure if the request fails.\n\n### normalizeRequest(request object or url)\n\n-   coerces URLs into request objects.\n-   completes an incomplete request object based on its `url`.\n\n### normalizeResponse(response)\n\n-   coerces strings, arrays, and other objects supporting\n    ``forEach`` into proper response objects.\n-   if it receives `undefined`, it returns `undefined`.  This is used as\n    a singal to the requester that the responder has taken control of\n    the response stream.\n\n### request\n\nA complete request object has the following properties.\n\n-   ``url`` the full URL of the request as a string\n-   ``path`` the full path as a string\n-   ``scriptName`` the routed portion of the path, like ``\"\"`` for\n    ``http://example.com/`` if no routing has occurred.\n-   ``pathInfo`` the part of the path that remains to be routed,\n    like ``/`` for ``http://example.com`` or ``http://example.com/``\n    if no routing has occurred.\n-   ``version`` the requested HTTP version as an array of strings.\n-   ``method`` like ``\"GET\"``\n-   ``scheme`` like ``\"http:\"``\n-   ``host`` like ``\"example.com\"``\n-   ``port`` the port number, like ``80``\n-   ``remoteHost``\n-   ``remotePort``\n-   ``headers``\n    corresponding values, possibly an array for multiple headers\n    of the same name.\n-   ``body``\n-   ``node`` the wrapped Node request object\n\n### response\n\nA complete response object has the following properties.\n\n-   ``status`` the HTTP status code as a number, like ``200``.\n-   ``headers``\n-   ``body`` an IO reader\n-   ``onclose`` is an optional function that this library will call\n    when a response concludes.\n-   ``node`` the wrapped Node response object.\n\n### headers\n\nHeaders are an object mapping lower-case header-names to corresponding\nvalues, possibly an array for multiple headers of the same name, for\nboth requests and responses.\n\n### body\n\nbody is a representation of a readable stream, either for the content of\na request or a response.  It is implemented as a Q-IO reader.\n\n-   ``forEach(callback)``\n    -   accepts a ``callback(chunk)`` function\n        -   accepts a chunk as either a string or a ``Buffer``\n        -   returns undefined or a promise for undefined when the\n            chunk has been flushed.\n    -   returns undefined or a promise for undefined when the stream\n        is finished writing.\n    -   the ``forEach`` function for arrays of strings or buffers is\n        sufficient for user-provided bodies\n-   the ``forEach`` function is the only necessary function for\n    bodies provided to this library.\n-   in addition to ``forEach``, bodies provided by this library\n    support the entire readable stream interface provided by\n    ``q-io``.\n-   ``read()``\n    -   returns a promise for the entire body as a string or a\n        buffer.\n\n### application\n\nAn HTTP application is a function that accepts a request and returns a\nresponse.  The `request` function itself is an application.\nApplications can be chained and combined to make advanced servers and\nclients.\n\n-   accepts a request\n-   returns a response, a promise for a response, or nothing if no\n    response should be sent.\n\n## Reader\n\nReader instances have the following methods:\n\n-   `read()`\n-   `forEach(callback)`\n-   `close()`\n-   `node` the underlying node reader\n\nAdditionally, the `Reader` constructor has the following methods:\n\n-   `read(tream, charset)` accepts any foreachable and returns either a\n    buffer or a string if given a charset.\n-   `join(buffers)` consolidates an array of buffers into a single\n    buffer.  The buffers array is collapsed in place and the new first\n    and only buffer is returned.\n\nThe `reader` module exports a function that accepts a Node reader and\nreturns a Q reader.\n\n## Writer\n\nWriter instances have the following methods:\n\n-   `write(content)` writes a chunk of content, either from a string or\n    a buffer.\n-   `flush()` returns a promise to drain the outbound content all the\n    way to its destination.\n-   `close()`\n-   `destroy()`\n-   `node` the underlying node writer\n\nThe `writer` module exports a function that accepts a Node writer and\nreturns a Q writer.\n\n---\n\nCopyright 2009â€“2012 Kristopher Michael Kowal\nMIT License (enclosed)\n\n",
  "readmeFilename": "README.md",
  "_id": "q-io@1.3.2",
  "_from": "q-io@~1.3.2"
}
