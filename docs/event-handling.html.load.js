montageDefine("3ea393a","docs/event-handling.html",{text:'<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=utf-8>\n    <meta name=viewport content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">\n    <meta http-equiv=X-UA-Compatible content="chrome=1">\n\n    <title>Event handling - Montage Docs</title>\n\n    <link rel=stylesheet href="http://fonts.googleapis.com/css?family=Open+Sans:400,700">\n    <link rel=stylesheet href="../stylesheets/normalize.css">\n    <link rel=stylesheet href="../stylesheets/base.css">\n    <link rel=stylesheet href="../stylesheets/pages.css">\n    <link rel=stylesheet href="../stylesheets/solarized.css">\n\n    <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->\n</head>\n<body class=docs>\n\n    <header class="header header-pages pushed">\n        <div class=header-container>\n            <a href="/"><img class=logo src="../images/logo-pages.png" alt=Montage></a>\n            <nav class=nav>\n                <a class=nav-item href="/apps">Apps</a>\n                <a class="nav-item active" href="/docs">Docs</a>\n                <a class=nav-item href="/apis">APIs</a>\n            </nav>\n        </div>\n    </header>\n\n    <section id=docs>\n        <article>\n            <div class=markdown-body>\n\n<h1>Event handling<a class=anchor id=Event-handling href="#Event-handling"></a>\n</h1>\n\n<p>Montage includes a custom event manager that transparently wraps the browser’s native event handling mechanism. This enables several features in Montage, including simpler event handling code, property change observing, and results in better performing web applications.</p>\n\n<h2>About event delegation<a class=anchor id=About-event-delegation href="#About-event-delegation"></a>\n</h2>\n\n<p>Montage uses <em>event delegation</em> to manage event handling and dispatching. With event delegation, instead of installing event listeners on every element that may dispatch an event, a single event listener is installed on a parent element that listens for and responds to events that target its children. This is made possible by the standard event “flow” defined by the <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-flow">DOM Level 3 Event Specification</a>.</p>\n\n<p>Event delegation provides several benefits. For instance, application performance is improved since the number of event listeners is reduced. In a Montage application there is only one “native” event listener, which acts as the primary event responder and dispatcher of all events. It also enables Montage applications to observe changes to property values and arrays.</p>\n\n<h2>Creating event handlers<a class=anchor id=Creating-event-handlers href="#Creating-event-handlers"></a>\n</h2>\n\n<p>You use the standard <code>addEventListener()</code> method to register an event handler on a target object. In Montage, the <code>target</code> object can be any JavaScript object, not just a DOM element.</p>\n\n<p><code>target.addEventListener(eventType, listener[, useCapture]);</code></p>\n\n<ul>\n<li>\n<code>eventType</code> A string representing the event type.</li>\n<li>\n<code>listener</code> An object that implements the Montage event listener interface, or a function to call directly.</li>\n<li>\n<code>useCapture</code> A boolean that, if true, causes all events of the specified type to be dispatched to the registered listener before being dispatched to any other event target beneath it in the DOM tree. By default, this is property is <code>false</code>.</li>\n</ul><h3>Montage event listener interface<a class=anchor id=Montage-event-listener-interface href="#Montage-event-listener-interface"></a>\n</h3>\n\n<p>The Montage event listener interface extends the <a href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html#interface-EventListener">DOM Level 3 EventListener interface</a> specification implemented by all modern web browsers. In the standard interface you specify an object as a “listener” object for an event type. The listener object defines an <code>handleEvent()</code> method that is invoked by the browser whenever the specified event occurs:\n</p><div class=highlight><pre><span class=c1>// DOM Level 3 EventListener interface</span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleEvent</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got \'mousedown\' event."</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=kd>var</span> <span class=nx>loginBtn</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>querySelector</span><span class=p>(</span><span class=s2>"#loginBtn"</span><span class=p>);</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>);</span>\n</pre></div>\n\n<p>Montage extends this interface to make it more useful for developers. Instead of calling the same <code>handleEvent()</code> method on the listener object, Montage infers the name of the specific event handler to call from three pieces of information:</p>\n\n<ul>\n<li>The event’s phase (bubble or capture)</li>\n<li>The event name</li>\n<li>Optionally, a string identifier property on the target element or object</li>\n</ul><p>The following pseudo-code shows how the event manager determines what method to call on the listener object:\n</p><div class=highlight><pre><span class=nx>methodToInvoke</span> <span class=o>=</span> <span class=s2>""</span><span class=p>;</span>\n<span class=nx>identifier</span> <span class=o>=</span> <span class=nx>eventTarget</span><span class=p>.</span><span class=nx>identifier</span><span class=p>;</span>\n<span class=k>if</span> <span class=p>(</span><span class=nx>event</span><span class=p>.</span><span class=nx>phase</span> <span class=o>==</span> <span class=s2>"bubble"</span> <span class=p>)</span> <span class=p>{</span>  \n   <span class=nx>methodToInvoke</span> <span class=o>=</span> <span class=s2>"handle"</span> <span class=o>+</span> \n                     <span class=p>(</span><span class=nx>identifier</span> <span class=o>?</span> <span class=nx>identifier</span><span class=p>.</span><span class=nx>toCapitalized</span><span class=p>()</span> <span class=o>:</span> <span class=s2>""</span><span class=p>)</span> <span class=o>+</span>\n                     <span class=nx>eventType</span><span class=p>.</span><span class=nx>toCapitalized</span><span class=p>();</span>\n<span class=p>}</span> <span class=k>else</span> <span class=p>{</span>\n   <span class=nx>methodtoInvoke</span> <span class=o>=</span> <span class=s2>"capture"</span> <span class=o>+</span> \n                    <span class=p>(</span><span class=nx>identifier</span> <span class=o>?</span> <span class=nx>identifier</span><span class=p>.</span><span class=nx>toCapitalized</span><span class=p>()</span> <span class=o>:</span> <span class=s2>""</span><span class=p>)</span> <span class=o>+</span> \n                     <span class=nx>eventType</span><span class=p>.</span><span class=nx>toCapitalized</span><span class=p>();</span>\n<span class=p>}</span>\n</pre></div>\n\n<p>The easiest way to understand how this works is to look at some examples.</p>\n\n<h3>Examples<a class=anchor id=Examples href="#Examples"></a>\n</h3>\n\n<p>The following code is almost identical to the previous example (without Montage), except that the handler method is named <code>handleMousedown()</code> instead of <code>handleEvent()</code>. This method will be invoked automatically by the event manager when the <code>mousedown</code> event occurs on <code>loginBtn</code>, but only during the event’s bubble phase.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// Listening for mousedown event during bubble phase</span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleMousedown</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got \'mousedown\' event."</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=kd>var</span> <span class=nx>loginBtn</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>querySelector</span><span class=p>(</span><span class=s2>"#loginBtn"</span><span class=p>);</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>);</span>\n</pre></div>\n\n<p>To listen for the same event during its capture phase, you pass <code>true</code> as the third parameter to <code>addEventListener()</code>, and change the name of the event handler from <code>handleMousedown()</code> to <code>captureMousedown()</code>.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// Listening for capture events on same element </span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>captureMousedown</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got \'mousedown\' event during bubble phase."</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=kd>var</span> <span class=nx>loginBtn</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>querySelector</span><span class=p>(</span><span class=s2>"#loginBtn"</span><span class=p>);</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>,</span> <span class=kc>true</span><span class=p>);</span> <span class=c1>// useCapture = true</span>\n</pre></div>\n\n<p>You can further specialize the event handler name by adding an <code>identifier</code> to the event target. The event manager includes this string, with its first letter capitalized, in the method name it composes. In the following example, the string “__login__” is assigned to the <code>loginBtn</code>‘s <code>identifier</code> property, so the event listener defines a <code>handleLoginMousedown()</code> function.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// Using identifier strings on target elements</span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=c1>// Listener for loginBtn</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleLoginMousedown</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n    <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>"mousedown on loginBtn"</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=kd>var</span> <span class=nx>loginBtn</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>querySelector</span><span class=p>(</span><span class=s2>"#loginBtn"</span><span class=p>);</span>\n<span class=c1>// Assign string identifier to button</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>identifier</span> <span class=o>=</span> <span class=s2>"login"</span><span class=p>;</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>);</span>\n</pre></div>\n\n<h3>Event handler precedence<a class=anchor id=Event-handler-precedence href="#Event-handler-precedence"></a>\n</h3>\n\n<p>The event manager will always invoke the most specific event handler. For instance, in the following example the listener object defines two event handlers, one that includes the target’s identifier string (<code>handleLoginBtnMousedown()</code>) and one that doesn’t (<code>handleMousedown()</code>). Montage will always invoke <code>handleLoginBtnMousedown()</code> as its purpose is more specific than the other.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// Event handler precedence</span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleMousedown</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=c1>// This won\'t get called.</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got \'mousedown\' event."</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleLoginbtnMousedown</span> <span class=o>=</span> <span class=kd>function</span> <span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got \'mousedown\' event on event.target"</span><span class=p>);</span> \n<span class=p>}</span>\n<span class=kd>var</span> <span class=nx>loginBtn</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>querySelector</span><span class=p>(</span><span class=s2>"#loginBtn"</span><span class=p>);</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>identifier</span> <span class=o>=</span> <span class=s2>"login"</span><span class=p>;</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>);</span>\n</pre></div>\n\n<p>Note that if <code>loginBtn</code> did not define an <code>identifier</code> property, the event manager would invoke <code>handleMousedown()</code>.</p>\n\n<p>Also, Montage will invoke the listener’s generic <code>handleEvent()</code> method, if it exists, and if a more specifically named handler is not declared. This provides a fallback mechanism to respond to “generic” events.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// Using default handleEvent() handler</span>\n<span class=kd>var</span> <span class=nx>listenerObj</span> <span class=o>=</span> <span class=p>{};</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>captureClickEvent</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"Got click event"</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=nx>listenerObj</span><span class=p>.</span><span class=nx>handleEvent</span> <span class=o>=</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n     <span class=nx>alert</span><span class=p>(</span><span class=s2>"No specific handler for "</span> <span class=o>+</span> <span class=nx>event</span><span class=p>.</span><span class=nx>type</span><span class=p>);</span>\n<span class=p>}</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"mousedown"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>);</span>\n<span class=nx>loginBtn</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"click"</span><span class=p>,</span> <span class=nx>listenerObj</span><span class=p>,</span> <span class=kc>true</span><span class=p>);</span>\n</pre></div>\n\n<h2>Declaring event listeners in a serialization<a class=anchor id=Declaring-event-listeners-in-a-serialization href="#Declaring-event-listeners-in-a-serialization"></a>\n</h2>\n\n<p>Each object in a serialization may include a "listeners" object that specifies the event type, listener object, and (optionally) whether to enable capture for the event.</p>\n\n<p>First you create the listener object, which contains a <code>handleAction()</code> method. This method changes the <code>value</code> property of the Montage Button component that dispatched the event, setting its label.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// controller.js</span>\n<span class=kd>var</span> <span class=nx>Montage</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s2>"montage/core/core"</span><span class=p>).</span><span class=nx>Montage</span><span class=p>;</span>\n\n<span class=nx>exports</span><span class=p>.</span><span class=nx>Controller</span> <span class=o>=</span> <span class=nx>Montage</span><span class=p>.</span><span class=nx>create</span><span class=p>(</span><span class=nx>Montage</span><span class=p>,</span> <span class=p>{</span>\n    <span class=nx>handleAction</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n            <span class=nx>event</span><span class=p>.</span><span class=nx>target</span><span class=p>.</span><span class=nx>value</span> <span class=o>=</span> <span class=s2>"Well done"</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>}</span>\n<span class=p>})</span>\n</pre></div>\n\n<p>Next we create the HTML page that declares the Button component and the custom Controller object. The Button component’s <code>listeners</code> property specifies the type of event to listen for (<code>action</code>) and the listener object that will handle the event.</p>\n\n<p></p><div class=highlight><pre><span class=nt>&lt;html&gt;</span>\n ...\n<span class=nt>&lt;script </span><span class=na>type=</span><span class=s>"text/montage-serialization"</span><span class=nt>&gt;</span>\n<span class=p>{</span>\n    <span class=s2>"button"</span> <span class=o>:</span> <span class=p>{</span>\n        <span class=s2>"name"</span><span class=o>:</span> <span class=s2>"Button"</span><span class=p>,</span>\n        <span class=s2>"module"</span><span class=o>:</span> <span class=s2>"montage/ui/button.reel"</span><span class=p>,</span>\n        <span class=s2>"properties"</span><span class=o>:</span> <span class=p>{</span>\n            <span class=s2>"element"</span><span class=o>:</span> <span class=p>{</span><span class=s2>"#"</span><span class=o>:</span> <span class=s2>"btn"</span><span class=p>}</span>\n        <span class=p>},</span>\n        <span class=s2>"listeners"</span><span class=o>:</span> <span class=p>[</span>\n            <span class=p>{</span>\n                <span class=s2>"type"</span><span class=o>:</span> <span class=s2>"action"</span><span class=p>,</span>\n                <span class=s2>"listener"</span><span class=o>:</span> <span class=p>{</span><span class=s2>"@"</span><span class=o>:</span> <span class=s2>"controller"</span><span class=p>}</span>\n            <span class=p>}</span>\n        <span class=p>]</span>\n    <span class=p>},</span>\n\n    <span class=s2>"controller"</span><span class=o>:</span> <span class=p>{</span>\n        <span class=s2>"name"</span><span class=o>:</span> <span class=s2>"Controller"</span><span class=p>,</span>\n        <span class=s2>"module"</span><span class=o>:</span> <span class=s2>"controller"</span>\n    <span class=p>}</span>\n<span class=p>}</span>\n<span class=nt>&lt;/script&gt;</span>\n ...\n<span class=nt>&lt;/html&gt;</span>\n</pre></div>\n\n<p>You can also specify the <code>identifier</code> string in the serialization, as shown below:\n</p><div class=highlight><pre><span class=err>&lt;script</span> <span class=err>type=</span><span class=s2>"text/montage-serialization"</span><span class=err>&gt;</span>\n<span class=p>{</span>\n    <span class=nt>"button"</span> <span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"Button"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"montage/ui/button.reel"</span><span class=p>,</span>\n        <span class=nt>"properties"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"element"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"#"</span><span class=p>:</span> <span class=s2>"btn"</span><span class=p>},</span>\n            <span class=nt>"identifier"</span><span class=p>:</span> <span class=s2>"purchase"</span>\n        <span class=p>},</span>\n        <span class=nt>"listeners"</span><span class=p>:</span> <span class=p>[</span>\n            <span class=p>{</span>\n                <span class=nt>"type"</span><span class=p>:</span> <span class=s2>"action"</span><span class=p>,</span>\n                <span class=nt>"listener"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"@"</span><span class=p>:</span> <span class=s2>"controller"</span><span class=p>}</span>\n            <span class=p>}</span>\n        <span class=p>]</span>\n    <span class=p>},</span>\n\n    <span class=nt>"controller"</span><span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"Controller"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"controller"</span>\n    <span class=p>}</span>\n<span class=p>}</span>\n<span class=err>&lt;/script&gt;</span>\n</pre></div>\n\n<h2>Dependent properties<a class=anchor id=Dependent-properties href="#Dependent-properties"></a>\n</h2>\n\n<p>A property belonging to an object may declare itself to be dependent on one or more other “independent” properties. If the value of one of the dependencies changes, a <code>change@dependentProp</code> event is dispatched, as if the dependent property was modified itself. This is especially useful in <a href=data-binding.html>data binding</a>.</p>\n\n<h3>Basic example<a class=anchor id=Basic-example href="#Basic-example"></a>\n</h3>\n\n<p>To declare a property’s dependencies you can use the <code>dependencies</code> property attribute when defining the object prototype, or by calling <code>Montage.addDependencyToProperty()</code>. The <code>dependencies</code> attribute is an array of strings whose values correspond to the name(s) of the property (or properties) that the observed property depends on.</p>\n\n<p>In the following example, the <code>Employee</code> object defines a <code>fullName</code> property that depends on the object’s <code>firstName</code> and <code>lastName</code> properties. The <code>fullName</code> property is contains an accessor (getter method) that returns a concatenation of the first and last names. An event listener is registered on the Employee object for the <code>change@fullName</code> event type. The same object is specified as the listener object (<code>this</code> as the second parameter to <code>addEventListener()</code>) so its <code>handleEvent()</code> is called when the specified event type occurs.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// employee.js</span>\n<span class=kd>var</span> <span class=nx>Montage</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s2>"montage/core/core"</span><span class=p>).</span><span class=nx>Montage</span><span class=p>;</span>\n\n<span class=nx>exports</span><span class=p>.</span><span class=nx>Employee</span> <span class=o>=</span> <span class=nx>Montage</span><span class=p>.</span><span class=nx>create</span><span class=p>(</span><span class=nx>Montage</span><span class=p>,</span> <span class=p>{</span>\n\n    <span class=nx>firstName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=s2>"James"</span>\n    <span class=p>},</span>\n    <span class=nx>lastName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=s2>"Kirk"</span>\n    <span class=p>},</span>\n    <span class=nx>fullName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>dependencies</span><span class=o>:</span> <span class=p>[</span><span class=s2>"firstName"</span><span class=p>,</span> <span class=s2>"lastName"</span><span class=p>],</span>\n        <span class=nx>get</span><span class=o>:</span> <span class=kd>function</span><span class=p>()</span> <span class=p>{</span>\n            <span class=k>return</span> <span class=k>this</span><span class=p>.</span><span class=nx>firstName</span> <span class=o>+</span> <span class=s2>" "</span> <span class=o>+</span> <span class=k>this</span><span class=p>.</span><span class=nx>lastName</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n    <span class=nx>handleEvent</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n            <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>"fullName changed to "</span> <span class=o>+</span> <span class=k>this</span><span class=p>.</span><span class=nx>fullName</span><span class=p>);</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n    <span class=nx>deserializedFromTemplate</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kd>function</span><span class=p>()</span> <span class=p>{</span>\n            <span class=c1>// Create a change@ event listener, </span>\n            <span class=k>this</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"change@fullName"</span><span class=p>,</span> <span class=k>this</span><span class=p>);</span>\n            <span class=c1>// And modify the value of firstName. </span>\n            <span class=k>this</span><span class=p>.</span><span class=nx>firstName</span> <span class=o>=</span> <span class=s2>"John"</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>}</span>\n<span class=p>});</span>\n</pre></div>\n\n<p>To run this example, create an HTML page that includes the Montage framework. Alternatively, you can specify dependencies of a property by calling <code>Montage.addDependencyToProperty()</code>, as shown below.</p>\n\n<p></p><div class=highlight><pre><span class=kd>var</span> <span class=nx>Montage</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s2>"montage/core/core"</span><span class=p>).</span><span class=nx>Montage</span><span class=p>;</span>\n\n<span class=nx>exports</span><span class=p>.</span><span class=nx>Employee</span> <span class=o>=</span> <span class=nx>Montage</span><span class=p>.</span><span class=nx>create</span><span class=p>(</span><span class=nx>Montage</span><span class=p>,</span> <span class=p>{</span>\n    <span class=nx>firstName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=s2>"James"</span>\n    <span class=p>},</span>\n    <span class=nx>lastName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=s2>"Kirk"</span>\n    <span class=p>},</span>\n    <span class=nx>fullName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>get</span><span class=o>:</span> <span class=kd>function</span><span class=p>()</span> <span class=p>{</span>\n            <span class=k>return</span> <span class=k>this</span><span class=p>.</span><span class=nx>firstName</span> <span class=o>+</span> <span class=s2>" "</span> <span class=o>+</span> <span class=k>this</span><span class=p>.</span><span class=nx>lastName</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n    <span class=nx>handleEvent</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kd>function</span><span class=p>(</span><span class=nx>event</span><span class=p>)</span> <span class=p>{</span>\n            <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>"fullName changed to "</span> <span class=o>+</span> <span class=k>this</span><span class=p>.</span><span class=nx>fullName</span><span class=p>);</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n    <span class=nx>deserializedFromTemplate</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kd>function</span><span class=p>()</span> <span class=p>{</span>\n            <span class=nx>Montage</span><span class=p>.</span><span class=nx>addDependencyToProperty</span><span class=p>(</span><span class=k>this</span><span class=p>,</span> <span class=s2>"firstName"</span><span class=p>,</span> <span class=s2>"fullName"</span><span class=p>);</span>\n            <span class=nx>Montage</span><span class=p>.</span><span class=nx>addDependencyToProperty</span><span class=p>(</span><span class=k>this</span><span class=p>,</span> <span class=s2>"lastName"</span><span class=p>,</span> <span class=s2>"fullName"</span><span class=p>);</span>\n            <span class=c1>// Create a change@ event listener, </span>\n            <span class=k>this</span><span class=p>.</span><span class=nx>addEventListener</span><span class=p>(</span><span class=s2>"change@fullName"</span><span class=p>,</span> <span class=k>this</span><span class=p>);</span>\n            <span class=c1>// And modify the value of firstName. </span>\n            <span class=k>this</span><span class=p>.</span><span class=nx>firstName</span> <span class=o>=</span> <span class=s2>"John"</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>}</span>\n<span class=p>});</span>\n</pre></div>\n\n<h3>Data binding and dependent properties<a class=anchor id=Data-binding-and-dependent-properties href="#Data-binding-and-dependent-properties"></a>\n</h3>\n\n<p>Dependent properties are especially useful when combined with data binding. A data binding in Montage is, essentially, a special purpose property change observer that keeps the observed property in sync with the property of another object. So if you define a data binding on a property that has dependencies, the data binding will execute whenever one of the dependencies has changed.</p>\n\n<p>The following example demonstrates how this works. It consists of two Textfield components (<code>&lt;input&gt;</code> text fields) in which the user enters a first and last name, and a DynamicText component (a <code>&lt;p&gt;</code> element) that displays the result. The HTML for the application contains the required markup, and a <code>&lt;link&gt;</code> element that includes the serialization from an external file named index.json:\n</p><div class=highlight><pre>// index.html\n<span class=cp>&lt;!doctype html&gt;</span>\n<span class=nt>&lt;html&gt;</span>\n<span class=nt>&lt;head&gt;</span>\n    <span class=nt>&lt;title&gt;</span>Data binding and dependent properties<span class=nt>&lt;/title&gt;</span>\n    <span class=nt>&lt;script </span><span class=na>src=</span><span class=s>"../montage/montage.js"</span><span class=nt>&gt;&lt;/script&gt;</span>\n    <span class=nt>&lt;link</span> <span class=na>rel=</span><span class=s>"serialization"</span> <span class=na>type=</span><span class=s>"text/montage-serialization"</span> <span class=na>href=</span><span class=s>"index.json"</span><span class=nt>&gt;</span>\n<span class=nt>&lt;/head&gt;</span>\n<span class=nt>&lt;body&gt;</span>\n    <span class=nt>&lt;input</span> <span class=na>type=</span><span class=s>"text"</span> <span class=na>id=</span><span class=s>"fname"</span> <span class=na>placeholder=</span><span class=s>"Enter first name..."</span><span class=nt>&gt;</span>\n    <span class=nt>&lt;input</span> <span class=na>type=</span><span class=s>"text"</span> <span class=na>id=</span><span class=s>"lname"</span> <span class=na>placeholder=</span><span class=s>"Enter last name..."</span><span class=nt>&gt;</span>\n    <span class=nt>&lt;p</span> <span class=na>id=</span><span class=s>"fullName"</span><span class=nt>&gt;&lt;/p&gt;</span>\n<span class=nt>&lt;/body&gt;</span>\n<span class=nt>&lt;/html&gt;</span>\n</pre></div>\n\n<p>The controller code is almost identical to the previous example, but the event handling code can be removed since the data binding will handle that for us.</p>\n\n<p></p><div class=highlight><pre><span class=c1>// controller.js</span>\n<span class=kd>var</span> <span class=nx>Montage</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s2>"montage/core/core"</span><span class=p>).</span><span class=nx>Montage</span><span class=p>;</span>\n\n<span class=nx>exports</span><span class=p>.</span><span class=nx>Controller</span> <span class=o>=</span> <span class=nx>Montage</span><span class=p>.</span><span class=nx>create</span><span class=p>(</span><span class=nx>Montage</span><span class=p>,</span> <span class=p>{</span>\n    <span class=nx>firstName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=kc>null</span>\n    <span class=p>},</span>\n    <span class=nx>lastName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>value</span><span class=o>:</span> <span class=s2>"Thomas"</span>\n    <span class=p>},</span>\n    <span class=nx>fullName</span><span class=o>:</span> <span class=p>{</span>\n        <span class=nx>dependencies</span><span class=o>:</span> <span class=p>[</span><span class=s2>"firstName"</span><span class=p>,</span> <span class=s2>"lastName"</span><span class=p>],</span>\n        <span class=nx>get</span><span class=o>:</span> <span class=kd>function</span><span class=p>()</span> <span class=p>{</span>\n            <span class=k>return</span> <span class=k>this</span><span class=p>.</span><span class=nx>firstName</span> <span class=o>+</span> <span class=s2>" "</span> <span class=o>+</span> <span class=k>this</span><span class=p>.</span><span class=nx>lastName</span><span class=p>;</span>\n        <span class=p>}</span>\n    <span class=p>}</span>\n<span class=p>});</span>\n</pre></div>\n\n<p>The serialization declares all the components being used. It also binds the values of the <code>&lt;input&gt;</code> elements to the <code>firstName</code> and <code>lastName</code> properties in the controller object. The value of the DynamicText field is bound to the <code>fullName</code> property, whose accessor method returns the concatenated values of the two strings.</p>\n\n<p></p><div class=highlight><pre><span class=err>//</span> <span class=err>index.json</span>\n<span class=p>{</span>\n    <span class=nt>"fullName"</span> <span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"DynamicText"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"montage/ui/dynamic-text.reel"</span><span class=p>,</span>\n        <span class=nt>"properties"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"element"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"#"</span><span class=p>:</span> <span class=s2>"fullName"</span><span class=p>}</span>\n        <span class=p>},</span>\n        <span class=nt>"bindings"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"value"</span><span class=p>:</span> <span class=p>{</span>\n                <span class=nt>"boundObject"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"@"</span><span class=p>:</span> <span class=s2>"controller"</span><span class=p>},</span>\n                <span class=nt>"boundObjectPropertyPath"</span><span class=p>:</span> <span class=s2>"fullName"</span>\n            <span class=p>}</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n\n    <span class=nt>"fname_input"</span> <span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"Textfield"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"montage/ui/textfield.reel"</span><span class=p>,</span>\n        <span class=nt>"properties"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"element"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"#"</span><span class=p>:</span> <span class=s2>"fname"</span><span class=p>}</span>\n        <span class=p>},</span>\n        <span class=nt>"bindings"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"value"</span><span class=p>:</span> <span class=p>{</span>\n                <span class=nt>"boundObject"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"@"</span><span class=p>:</span> <span class=s2>"controller"</span><span class=p>},</span>\n                <span class=nt>"boundObjectPropertyPath"</span><span class=p>:</span> <span class=s2>"firstName"</span>\n            <span class=p>}</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n\n    <span class=nt>"lname_input"</span> <span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"Textfield"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"montage/ui/textfield.reel"</span><span class=p>,</span>\n        <span class=nt>"properties"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"element"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"#"</span><span class=p>:</span> <span class=s2>"lname"</span><span class=p>}</span>\n        <span class=p>},</span>\n        <span class=nt>"bindings"</span><span class=p>:</span> <span class=p>{</span>\n            <span class=nt>"value"</span><span class=p>:</span> <span class=p>{</span>\n                <span class=nt>"boundObject"</span><span class=p>:</span> <span class=p>{</span><span class=nt>"@"</span><span class=p>:</span> <span class=s2>"controller"</span><span class=p>},</span>\n                <span class=nt>"boundObjectPropertyPath"</span><span class=p>:</span> <span class=s2>"lastName"</span>\n            <span class=p>}</span>\n        <span class=p>}</span>\n    <span class=p>},</span>\n\n    <span class=nt>"controller"</span><span class=p>:</span> <span class=p>{</span>\n        <span class=nt>"name"</span><span class=p>:</span> <span class=s2>"Controller"</span><span class=p>,</span>\n        <span class=nt>"module"</span><span class=p>:</span> <span class=s2>"controller-change"</span>\n    <span class=p>}</span>\n<span class=p>}</span>\n</pre></div>\n\n                </div>\n        </article>\n    </section>\n\n    <section id=next class=next>\n        <article>\n            <h3 class=title>More help?</h3>\n            <div class=cols>\n                <div class="col col-1-2">\n                    <p>Can\'t find what you are looking for? Get in touch, we\'re more than happy in helping answer your questions.\n                    </p>\n                </div>\n                <aside class="col col-1-2">\n                    <p><strong>Have feedback or ideas?</strong> Let us know by creating a new <a href="https://github.com/montagejs/montage/issues" target=_blank>issue</a>, join us in <a href="http://webchat.freenode.net/?channels=montage" target=_blank>IRC</a> or post questions to our <a href="https://groups.google.com/forum/?fromgroups#!forum/montagejs" target=_blank>Google Group</a>. We\'re also on <a href="https://twitter.com/montagejs" target=_blank>Twitter</a> and <a href="https://plus.google.com/116915300739108010954/" target=_blank>Google+</a>.\n                    </p>\n                </aside>\n            </div>\n        </article>\n    </section>\n\n\n    <section id=social class=social>\n        <article>\n\n            <div class="button-group github">\n                <iframe src="http://ghbtns.com/github-btn.html?user=montagejs&amp;repo=montage&amp;type=watch&amp;count=true" allowtransparency=true frameborder=0 scrolling=0 width=90px height=20px></iframe>\n                <iframe src="http://ghbtns.com/github-btn.html?user=montagejs&amp;repo=montage&amp;type=fork&amp;count=true" allowtransparency=true frameborder=0 scrolling=0 width=90px height=20px></iframe>\n            </div>\n\n\n            <div class="button-group twitter">\n                <a href="https://twitter.com/share" class=twitter-share-button data-via=montagejs data-count=none>Tweet</a>\n                <script>!function(e,n,s){var a,t=e.getElementsByTagName(n)[0];e.getElementById(s)||(a=e.createElement(n),a.id=s,a.src="//platform.twitter.com/widgets.js",t.parentNode.insertBefore(a,t))}(document,"script","twitter-wjs");</script>\n                <a href="https://twitter.com/montagejs" class=twitter-follow-button data-show-count=false data-show-screen-name=false>Follow @montagejs</a>\n                <script>!function(e,n,s){var a,t=e.getElementsByTagName(n)[0];e.getElementById(s)||(a=e.createElement(n),a.id=s,a.src="//platform.twitter.com/widgets.js",t.parentNode.insertBefore(a,t))}(document,"script","twitter-wjs");</script>\n            </div>\n\n            <div class="button-group g-plus">\n                \n                <script src="https://apis.google.com/js/plusone.js"></script>\n                \n                <div class=g-plusone data-size=medium data-annotation=inline data-width=200></div>\n                \n                <script>gapi.plusone.go();</script>\n            </div>\n\n        </article>\n    </section>\n\n\n    <footer class=footer>\n        2013 montagejs.org - <a href="https://github.com/montagejs/montagejs.org">Contributions</a> to this page are welcomed.\n    </footer>\n\n\n    \n    <script>var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-35717912-1"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();</script>\n\n</body>\n</html>'});
